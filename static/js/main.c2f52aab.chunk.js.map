{"version":3,"sources":["components/Button.js","App.js","components/Input.js","components/ClearButton.js","serviceWorker.js","index.js"],"names":["react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","react__WEBPACK_IMPORTED_MODULE_0___default","n","Button","props","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","App","_this","Object","C_Users_Zach_projects_calculator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","C_Users_Zach_projects_calculator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_Users_Zach_projects_calculator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","concatonateState","value","setState","input","state","handleEqual","eval","e","console","log","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","_components_Input__WEBPACK_IMPORTED_MODULE_8__","_components_Button__WEBPACK_IMPORTED_MODULE_7__","_components_ClearButton__WEBPACK_IMPORTED_MODULE_9__","handleClear","Component","Input","ClearButton","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2f52aab.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\n// checks if the number passed to val is a number or not\r\nconst isOperator = val => {\r\n    return !isNaN(val) || val === \".\" || val === \"=\";\r\n}\r\n\r\n// creates a button for each child passed. adds classname operator if the child passed was not a number\r\nconst Button = (props) => {\r\n    return(\r\n    <div className={`button-wrapper ${isOperator(props.children) ? null : \"operator\"}`}\r\n    onClick={() => props.handleClick(props.children)}\r\n    >\r\n        {props.children}\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Button;","import React, { Component } from 'react';\nimport './App.css';\nimport Button from './components/Button';\nimport Input from './components/Input';\nimport ClearButton from './components/ClearButton';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      input: ''\n    }\n  }\n\n  concatonateState = (value) => {\n    this.setState({\n      input:this.state.input + value\n    });\n  }\n\n  handleEqual = () => {\n    try{\n      this.setState({\n        // eslint-disable-next-line\n        input: eval(this.state.input)\n      })\n    }catch(e){\n      this.setState({\n        input: 'ERR'\n      })\n      console.log(e);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <Input input={this.state.input}></Input>\n          <div className=\"row\">\n            <Button handleClick={this.concatonateState}>7</Button>\n            <Button handleClick={this.concatonateState}>8</Button>\n            <Button handleClick={this.concatonateState}>9</Button>\n            <Button handleClick={this.concatonateState}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.concatonateState}>4</Button>\n            <Button handleClick={this.concatonateState}>5</Button>\n            <Button handleClick={this.concatonateState}>6</Button>\n            <Button handleClick={this.concatonateState}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.concatonateState}>1</Button>\n            <Button handleClick={this.concatonateState}>2</Button>\n            <Button handleClick={this.concatonateState}>3</Button>\n            <Button handleClick={this.concatonateState}>-</Button>\n          </div>\n          <div className=\"row\">\n            <Button handleClick={this.concatonateState}>.</Button>\n            <Button handleClick={this.concatonateState}>0</Button>\n            <Button handleClick={() => this.handleEqual()}>=</Button>\n            <Button handleClick={this.concatonateState}>+</Button>\n          </div>\n          <div className=\"row\">\n            <ClearButton handleClear={() => this.setState({input: ''})}>Clear</ClearButton>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        <div className=\"input\">{props.input}</div>\r\n    );\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\nimport './ClearButton.css';\r\n\r\n\r\nconst ClearButton = (props) => {\r\n    return(\r\n        <div className=\"clear-button\" onClick={props.handleClear}>{props.children}</div>\r\n    );\r\n}\r\n\r\nexport default ClearButton;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}